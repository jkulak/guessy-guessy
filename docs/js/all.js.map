{"version":3,"sources":["google.js","main.js"],"names":["b","o","i","l","e","r","GoogleAnalyticsObject","q","push","arguments","Date","createElement","getElementsByTagName","src","parentNode","insertBefore","window","document","ga","game","count","points","settings","answerTiemLimit","init","endpoint","fetch","then","data","json","questions","new","answers","innerHTML","updateStats","nextQuestion","displayQuestion","answerInput","value","focus","definitionDesc","description","hintDesc","phrase","result","Math","random","current","ctrlPoints","logAnswer","li","classList","add","appendChild","createTextNode","childNodes","skipQuestion","checkAnswer","toLowerCase","querySelector","onclick","onsubmit","addEventListener"],"mappings":"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","file":"all.js","sourcesContent":["'use strict';\n(function (b, o, i, l, e, r) {\n    b.GoogleAnalyticsObject = l;\n    b[l] || (b[l] =\n        function () {\n            (b[l].q = b[l].q || []).push(arguments);\n        });\n    b[l].l = +new Date;\n    e = o.createElement(i);\n    r = o.getElementsByTagName(i)[0];\n    e.src = '//www.google-analytics.com/analytics.js';\n    r.parentNode.insertBefore(e, r)\n}(window, document, 'script', 'ga'));\nga('create', 'UA-88988916-2', 'auto');\nga('send', 'pageview');\n","(function () {\n    'use strict';\n\n    const game = {\n\n        // Number of games played\n        count: 0,\n\n        // Number of points in current game\n        points: 0,\n\n        // Game settings\n        settings: {\n            answerTiemLimit: 30\n        },\n\n        // Init (bootstrap) the game\n        init: () => {\n            const endpoint = 'dict-easy.json';\n\n            fetch(endpoint)\n                .then(data => data.json())\n                .then(data => {\n                    game.questions = data;\n                    // hide loading\n                });\n        },\n\n        // Start a new game\n        new: () => {\n            game.count++;\n            game.points = 0;\n            game.points = 1;\n            //\n            answers.innerHTML = '';\n\n            updateStats();\n            nextQuestion();\n        },\n    };\n\n    const displayQuestion = q => {\n\n        answerInput.value = '';\n        answerInput.focus();\n\n        definitionDesc.innerHTML = q.description;\n        hintDesc.innerHTML = q.phrase;\n    };\n\n    // Select random questions from the questions object\n    const nextQuestion = () => {\n\n        let count = 0,\n            result = null;\n\n        for (let phrase in game.questions) {\n            if (Math.random() < 1 / ++count) {\n                result = phrase;\n            }\n        }\n\n        game.current = {\n            phrase: result,\n            description: game.questions[result]\n        };\n\n        displayQuestion(game.current);\n    };\n\n    const updateStats = () => {\n        ctrlPoints.innerHTML = game.points;\n    };\n\n    const logAnswer = (result, q) => {\n\n        if (result) {\n            game.points++;\n        }\n\n        const li = document.createElement('li');\n        li.classList.add(result ? 'good' : 'bad');\n        li.appendChild(document.createTextNode(`${q.phrase}: ${q.description}`));\n        answers.insertBefore(li, answers.childNodes[0]);\n\n        updateStats();\n    };\n\n    const skipQuestion = () => {\n\n        logAnswer(false, game.current);\n        nextQuestion();\n    };\n\n    const checkAnswer = () => {\n\n        if (answerInput.value.toLowerCase() === game.current.phrase.toLowerCase()) {\n            logAnswer(true, game.current);\n            nextQuestion();\n        }\n    };\n\n    // Assign controls to js consts\n    const answerInput = document.querySelector('.answer');\n    const definitionDesc = document.querySelector('.definition');\n    const hintDesc = document.querySelector('.hint');\n    const answers = document.querySelector('.answers');\n    const ctrlPoints = document.querySelector('.points');\n\n    // Bind actions to controls\n    document.querySelector('.control-newgame').onclick = function () {\n        game.new();\n        return false;\n    };\n\n    document.querySelector('.answer-form').onsubmit = function () {\n        return false;\n    };\n\n    document.querySelector('.skip').onclick = function () {\n        skipQuestion();\n        return false;\n    };\n\n    answerInput.addEventListener('keyup', checkAnswer);\n\n    // Init the game\n    game.init();\n\n})();\n"]}