{"version":3,"sources":["game.js","game-interface.js","google.js","main.js"],"names":["loadJSON","fileName","callback","xobj","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","responseText","send","game","count","settings","answerTiemLimit","currentGame","points","question","currentQuestion","timeLeft","questonsFile","timer","debug","init","endpoint","response","questions","JSON","parse","new","answers","innerHTML","updateStats","enableControls","nextQuestion","stop","clearInterval","this","disableControls","iterate","revealHint","logAnswer","answer","phrase","len","Math","floor","length","stars","Array","join","playAnswerInput","placeholder","substr","slice","addPoints","result","random","description","setInterval","displayQuestion","skipQuestion","checkAnswer","value","toLowerCase","focus","definitionDesc","hintDesc","statsQuestion","statsPoints","statsTimer","li","document","createElement","classList","add","insertBefore","childNodes","querySelector","ctrlNewGame","onclick","ctrlStop","playAnswerForm","onsubmit","playSkip","addEventListener","b","o","i","l","e","r","GoogleAnalyticsObject","q","push","arguments","Date","getElementsByTagName","src","parentNode","window","ga"],"mappings":"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","file":"all.js","sourcesContent":["'use strict';\n\nconst game = {\n\n    // Number of games played\n    count: 0,\n\n    // Game settings\n    settings: {\n        answerTiemLimit: 10\n    },\n\n    // Current game data\n    currentGame: {\n        // Number of points in current game\n        points: 0,\n        question: 0\n    },\n\n    // Current question data\n    currentQuestion: {\n        timeLeft: 0\n    },\n\n    // File with a dictionary\n    questonsFile: 'dict-easy.json',\n\n    // Interval timer handler\n    timer: null,\n\n    // Enable debugging\n    debug: false,\n\n    // Init (bootstrap) the game\n    init: function () {\n        const endpoint = game.questonsFile;\n\n        loadJSON(endpoint, (response) => {\n            game.questions = JSON.parse(response);\n        });\n\n        // fetch is not yet supported by iOS nor newest Safari\n        // http://caniuse.com/#search=fetch\n        // fetch(endpoint)\n        //     .then(data => data.json())\n        //     .then(data => {\n        //         game.questions = data;\n        //         // hide loading\n        //     });\n    },\n\n    // Start a new game\n    new: function () {\n\n        game.count++;\n        game.currentGame = {\n            points: 0,\n            question: 0\n        };\n\n        answers.innerHTML = '';\n        game.updateStats();\n        game.enableControls();\n        game.nextQuestion();\n    },\n\n    // Stop current game\n    stop: function () {\n\n        clearInterval(this.timer);\n        game.disableControls();\n    },\n\n    // Run every second, the game engine\n    iterate: function () {\n\n        game.currentQuestion.timeLeft--;\n        game.updateStats();\n        game.revealHint();\n        if (game.currentQuestion.timeLeft < 1) {\n            game.logAnswer(false);\n            game.nextQuestion();\n        }\n    },\n\n    // Slowly reveal a hint\n    revealHint: function () {\n\n        const answer = game.currentQuestion.phrase;\n        const len = Math.floor(answer.length / game.settings.answerTiemLimit * (game.settings.answerTiemLimit - game.currentQuestion.timeLeft));\n        const stars = new Array(answer.length + 1).join(\"*\");\n\n        // playAnswerInput.placeholder = answer.substr(0, len);\n        playAnswerInput.placeholder = answer.substr(0, len) + stars.slice(len);\n    },\n\n    // Calculate points logic\n    addPoints: function () {\n        game.currentGame.points += game.currentQuestion.timeLeft;\n    },\n\n    // Select random questions from the questions object\n    nextQuestion: function () {\n\n        let count = 0,\n            result = null;\n\n        for (let phrase in game.questions) {\n            if (Math.random() < 1 / ++count) {\n                result = phrase;\n            }\n        }\n\n        game.currentQuestion = {\n            phrase: result,\n            description: game.questions[result],\n            timeLeft: game.settings.answerTiemLimit\n        };\n\n        clearInterval(game.timer);\n        game.timer = setInterval(game.iterate, 1000);\n\n        game.currentGame.question++;\n\n        game.updateStats();\n        game.displayQuestion();\n    },\n\n    // Log wrong answer and start next question\n    skipQuestion: function () {\n\n        game.logAnswer(false);\n        game.nextQuestion();\n    },\n\n    // Check if entered answer is correct\n    checkAnswer: function () {\n\n        if (playAnswerInput.value.toLowerCase() === game.currentQuestion.phrase.toLowerCase()) {\n            game.logAnswer(true);\n            game.nextQuestion();\n        }\n    },\n\n    // Display a question\n    displayQuestion: function () {\n\n        playAnswerInput.placeholder = '';\n        playAnswerInput.value = '';\n        playAnswerInput.focus();\n\n        definitionDesc.innerHTML = game.currentQuestion.description;\n        if (game.debug) {\n            hintDesc.innerHTML = game.currentQuestion.phrase;\n        }\n\n    },\n\n    // Update stats panel (time, question, points)\n    updateStats: function () {\n\n        statsQuestion.innerHTML = game.currentGame.question;\n        statsPoints.innerHTML = game.currentGame.points;\n        statsTimer.innerHTML = game.currentQuestion.timeLeft;\n    },\n\n    // Log asnwer in the answer list\n    logAnswer: function (result) {\n\n        if (result) {\n            game.addPoints();\n        }\n\n        const li = document.createElement('li');\n        li.classList.add(result ? 'good' : 'bad');\n        // li.appendChild(document.createTextNode(`${game.currentQuestion.phrase}`));\n        li.innerHTML = `<strong>${game.currentQuestion.phrase}</strong><br />- ${game.currentQuestion.description}`;\n        answers.insertBefore(li, answers.childNodes[0]);\n\n        game.updateStats();\n    },\n\n    // Enable controls when the game starts\n    enableControls: function () {\n\n    },\n\n    // Disable controls when not in the game\n    disableControls: function () {\n\n    }\n};\n\nfunction loadJSON(fileName, callback) {\n\n    var xobj = new XMLHttpRequest();\n    xobj.overrideMimeType(\"application/json\");\n    xobj.open(\"GET\", fileName, true);\n    xobj.onreadystatechange = function () {\n        if (xobj.readyState == 4 && xobj.status == \"200\") {\n            // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n            callback(xobj.responseText);\n        }\n    };\n    xobj.send(null);\n}\n","'use strict';\n\n// Assign ctrls to js consts\nconst playAnswerInput = document.querySelector('.answer');\nconst definitionDesc = document.querySelector('.definition');\nconst hintDesc = document.querySelector('.hint');\nconst answers = document.querySelector('.answers');\nconst statsPoints = document.querySelector('.points');\nconst statsQuestion = document.querySelector('.question');\nconst statsTimer = document.querySelector('.timer');\n\n// Bind actions to ctrls\nconst ctrlNewGame = document.querySelector('.ctrl-newgame');\nctrlNewGame.onclick = () => {\n    game.new();\n    return false;\n};\n\nconst ctrlStop = document.querySelector('.ctrl-stop');\nctrlStop.onclick = () => {\n    game.stop();\n    return false;\n};\n\nconst playAnswerForm = document.querySelector('.answer-form');\nplayAnswerForm.onsubmit = () => {\n    return false;\n};\n\nconst playSkip = document.querySelector('.skip');\nplaySkip.onclick = () => {\n    game.skipQuestion();\n    return false;\n};\n\nplayAnswerInput.addEventListener('keyup', game.checkAnswer);\n","'use strict';\n(function (b, o, i, l, e, r) {\n    b.GoogleAnalyticsObject = l;\n    b[l] || (b[l] =\n        function () {\n            (b[l].q = b[l].q || []).push(arguments);\n        });\n    b[l].l = +new Date;\n    e = o.createElement(i);\n    r = o.getElementsByTagName(i)[0];\n    e.src = '//www.google-analytics.com/analytics.js';\n    r.parentNode.insertBefore(e, r)\n}(window, document, 'script', 'ga'));\nga('create', 'UA-88988916-2', 'auto');\nga('send', 'pageview');\n","'use strict';\n\n// Init the game\ngame.init();\n"]}